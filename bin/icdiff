#!/usr/bin/env python

""" icdiff.py

Authors: Jeff Kaufman and Eric Wald,
         loosely derived from difflib.HtmlDiff

License: This code is usable under the PSF License Agreement.
         See: http://www.python.org/psf/license/

"""

import os
import sys
import errno
import difflib
import optparse
import re
import filecmp
import unicodedata
import collections

color_codes = {
    "red":     '\033[0;31m',
    "green":   '\033[0;32m',
    "yellow":  '\033[0;33m',
    "blue":    '\033[0;34m',
    "magenta": '\033[0;35m',
    "cyan":    '\033[0;36m',
    "none":    '\033[m',
    "red_bold":     '\033[1;31m',
    "green_bold":   '\033[1;32m',
    "yellow_bold":  '\033[1;33m',
    "blue_bold":    '\033[1;34m',
    "magenta_bold": '\033[1;35m',
    "cyan_bold":    '\033[1;36m',
}

class ConsoleDiff(object):
    """Console colored side by side comparison with change highlights.

    Based on difflib.HtmlDiff

    This class can be used to create a text-mode table showing a side

    by side, line by line comparison of text with inter-line and
    intra-line change highlights in ansi color escape sequences as
    intra-line change highlights in ansi color escape sequences as
    read by xterm.  The table can be generated in either full or
    contextual difference mode.

    To generate the table, call make_table.

    Usage is the almost the same as HtmlDiff except only make_table is
    implemented and the file can be invoked on the command line.
    Run::

      python icdiff.py --help

    for command line usage information.

    """

    def __init__(self, tabsize=8,
                 cols=80,
                 line_numbers=False,
                 show_all_spaces=False,
                 highlight=False,
                 no_bold=False,
                 context=False,
                 numlines=5):
        """ConsoleDiff instance initializer

        Arguments:
        tabsize -- tab stop spacing, defaults to 8.
        cols -- width of the screen
        context -- set to True for contextual differences (defaults to False
            which shows full differences).
        numlines -- number of context lines.  When context is set True,
            controls number of lines displayed before and after the change.
            When context is False, controls the number of lines to place
            the "next" link anchors before the next change (so click of
            "next" link jumps to just before the change).
        """

        self._tabsize = tabsize
        self.line_numbers = line_numbers
        self.show_all_spaces = show_all_spaces
        self.highlight = highlight
        self.no_bold = no_bold

        if line_numbers:
            self.prefix = 5
        else:
            self.prefix = 1
        
        # Columns per side
        self.cols = (cols - 1) // 2
        
        # Columns available for text
        self._wrapcolumn = self.cols - (self.prefix + 1)
        
        if context:
            self.context_lines = numlines
        else:
            self.context_lines = None


    def _tab_newline_replace(self, line):
        """Returns from/to line lists with tabs expanded and newlines removed.

        Instead of tab characters being replaced by the number of spaces
        needed to fill in to the next tab stop, this function will fill
        the space with tab characters.  This is done so that the difference
        algorithms can identify changes in a file when tabs are replaced by
        spaces and vice versa.  At the end of the table generation, the tab
        characters will be replaced with a space.
        """
        # hide real spaces
        line = line.replace(' ', '\0')
        # expand tabs into spaces
        line = line.expandtabs(self._tabsize)
        # relace spaces from expanded tabs back into tab characters
        # (we'll replace them with markup after we do differencing)
        line = line.replace(' ', '\t')
        return line.replace('\0', ' ')

    def _display_len(self, s):
        # Handle wide characters like chinese.
        def width(c):
            if type(c) == type(u"") and unicodedata.east_asian_width(c) == 'W':
                return 2
            return 1

        return sum(width(c) for c in s)

    def _split_line(self, line_num, text):
        """Builds list of text lines by splitting text lines at wrap point

        This function will determine if the input text line needs to be
        wrapped (split) into separate lines.  If so, the first wrap point
        will be determined and the first line appended to the output
        text line list.  This function is used recursively to handle
        the second part of the split line to further split it.
        """
        
        mark = ''
        for number, line in enumerate(text.replace('\n\1', '\1\n').splitlines(True)):
            if self.line_numbers:
                line_id = line_num + number
            else:
                # Highlight a space for each line.
                line_id = ' '
            
            while line:
                if mark:
                    line = mark + line
                
                # scan line looking for the wrap point, keeping track if the wrap
                # point is inside markers
                i = 0
                width = 0
                for n, c in enumerate(line):
                    if c == '\0':
                        mark = line[n:n+2]
                    elif c == '\1':
                        mark = ''
                        i = n + 1
                    elif c == '\n':
                        i = n + 1
                    else:
                        w = self._display_len(c)
                        if width + w > self._wrapcolumn:
                            break
                        width += w
                        i = n + 1

                # wrap point is inside text, break it up into separate lines
                line1 = line[:i]
                line2 = line[i:]

                # if wrap point is inside markers, place end marker at end of first
                # line and start marker at beginning of second line
                if line2 and mark:
                    line1 += '\1'

                # Send out the first part
                yield line_id, line1.replace('\n', '')

                # loop again to wrap the remaining text
                line_id = ''
                line = line2

    def _line_wrapper(self, fromdesc, todesc, diffs):
        """Returns iterator that splits (wraps) mdiff text lines"""
        if fromdesc or todesc:
            yield (
                simple_colorize(fromdesc, "blue_bold"),
                simple_colorize(todesc, "blue_bold"),
            )

        separator = self._format_line('', '', simple_colorize('---', "blue_bold"))
        # pull from/to data and flags from diff iterator
        for line in diffs:
            if line is None:
                # separator lines between context data
                yield (separator, separator)
                continue

            flagged = line.left != line.right

            # for each from/to line split it at the wrap column to form
            # list of text lines.
            fromlist = list(self._split_line(0, line.left))
            tolist = list(self._split_line(0, line.right))

            # yield from/to line in pairs inserting blank lines as
            # necessary when one side has more wrapped lines
            while fromlist or tolist:
                if fromlist:
                    left_line = self._format_line('\0-' if flagged else '', *fromlist.pop(0))
                else:
                    left_line = ''
                if tolist:
                    right_line = self._format_line('\0+' if flagged else '', *tolist.pop(0))
                else:
                    right_line = ''
                yield left_line, right_line

    def _format_line(self, flag, line_id, text):
        prefix = str(line_id)
        if flag and prefix:
            prefix = flag + prefix + '\1'
        return '%s %s' % (self._rpad(prefix, self.prefix), text.rstrip())

    def _real_len(self, s):
        l = 0
        in_esc = False
        prev = ' '
        trimmed = (s
            .replace('\0+', "")
            .replace('\0-', "")
            .replace('\0^', "")
            .replace('\1', "")
            .replace('\t', ' ')
        )
        for c in trimmed:
            if in_esc:
                if c == "m":
                    in_esc = False
            else:
                if c == "[" and prev == "\033":
                    in_esc = True
                    l -= 1 # we counted prev when we shouldn't have
                else:
                    l += self._display_len(c)
            prev = c

        return l


    def _rpad(self, s, field_width):
        return self._pad(s, field_width) + s

    def _pad(self, s, field_width):
        return " " * (field_width - self._real_len(s))

    def _lpad(self, s, field_width):
        return s + self._pad(s, field_width)

    def make_table(self, fromlines, tolines, fromdesc='', todesc=''):
        """Generates table of side by side comparison with change highlights

        Arguments:
        fromlines -- list of "from" lines
        tolines -- list of "to" lines
        fromdesc -- "from" file column header string
        todesc -- "to" file column header string
        """

        # change tabs to spaces before it gets more difficult after we insert markup
        fromlines = map(self._tab_newline_replace, fromlines)
        tolines = map(self._tab_newline_replace, tolines)

        # generates side by side from/to data
        diffs = SideBySideDiff(self.context_lines).diff_lines(fromlines, tolines)

        # wrap lines that exceed desired width
        for left, right in self._line_wrapper(fromdesc, todesc, diffs):
            yield ("%s %s" % (
                self.colorize(self._lpad(left, self.cols)),
                self.colorize(self._lpad(right, self.cols)),
            ))

    def colorize(self, s):
        def background(color):
            return color.replace("\033[1;", "\033[7;")

        if self.no_bold:
            C_ADD = color_codes["green"]
            C_SUB = color_codes["red"]
            C_CHG = color_codes["yellow"]
        else:
            C_ADD = color_codes["green_bold"]
            C_SUB = color_codes["red_bold"]
            C_CHG = color_codes["yellow_bold"]

        if self.highlight:
            C_ADD, C_SUB, C_CHG = background(C_ADD), background(C_SUB), background(C_CHG)

        C_NONE = color_codes["none"]
        colors = (C_ADD, C_SUB, C_CHG, C_NONE)

        s = (s
            .replace('\0+', C_ADD)
            .replace('\0-', C_SUB)
            .replace('\0^', C_CHG)
            .replace('\1', C_NONE)
            .replace('\t', ' ')
        )

        if self.highlight:
            return s

        if not self.show_all_spaces:
            # If there's a change consisting entirely of whitespace, don't color it.
            return re.sub("\033\\[[01];3([123])m(\\s+)(\033\\[)", "\033[7;3\\1m\\2\\3", s)

        def will_see_coloredspace(i, s):
            while i < len(s) and s[i].isspace():
                i += 1
            if i < len(s) and s[i] == '\033':
                return False
            return True

        n_s = []
        in_color = False
        seen_coloredspace = False
        for i, c in enumerate(s):
            if len(n_s) > 6 and n_s[-1] == "m":
                ns_end = "".join(n_s[-7:])
                for color in colors:
                    if ns_end.endswith(color):
                        if color != in_color:
                            seen_coloredspace = False
                        in_color = color
                if ns_end.endswith(C_NONE):
                    in_color = False

            if c.isspace() and in_color and (self.show_all_spaces or not (seen_coloredspace or will_see_coloredspace(i, s))):
                n_s.extend([C_NONE, background(in_color), c, C_NONE, in_color])
            else:
                if in_color:
                    seen_coloredspace = True
                n_s.append(c)

        joined = "".join(n_s)

        return joined

class SideBySideDiff(object):
    Line = collections.namedtuple('Line', ['left', 'right'])
    
    word_search = re.compile(r'\[/?\w+\]|\S+\s*|\s+')
    
    def __init__(self, contextlines):
        self.context = contextlines
    
    def diff_text(self, left, right):
        return self.diff_lines(left.splitlines(True), right.splitlines(True))

    def diff_lines(self, left, right):
        self.lines = []
        self.left = ''
        self.right = ''
        self.diff(left, right, 'lines')
        self.append_line()
        return self.lines
    
    def diff(self, left, right, step):
        mangle = getattr(self, 'mangle_' + step)
        a = mangle(left)
        b = mangle(right)
        cruncher = difflib.SequenceMatcher(None, a, b)
        for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():
            handler = getattr(self, tag + '_' + step)
            handler(a[alo:ahi], b[blo:bhi])
    
    def mangle_lines(self, lines):
        # This loses the distinction of a missing line ending on the last line,
        # but translates any line ending convention (stripped or not)
        # to the newline convention expected by equal_words().
        return [line.rstrip('\r\n') + '\n' for line in lines]
    
    def replace_lines(self, left, right):
        self.diff(left, right, 'words')
    
    def append_line(self):
        if self.left or self.right:
            self.lines.append(self.Line(self.left, self.right))
            self.left = ''
            self.right = ''
    
    def equal_lines(self, left, right):
        self.append_line()
        newlines = [self.Line(line, line) for line in left]
        if self.context:
            if len(newlines) > self.context * 2:
                newlines[self.context:-self.context] = [None]
        elif self.context == 0:
            newlines = [None]
        self.lines.extend(newlines)
    
    def delete_lines(self, left, right):
        assert not right
        self.append_line()
        self.lines.extend(self.Line(line, '') for line in left)
    
    def insert_lines(self, left, right):
        assert not left
        self.append_line()
        self.lines.extend(self.Line('', line) for line in right)
    
    def mangle_words(self, lines):
        return self.word_search.findall(''.join(lines))
    
    def replace_words(self, left, right):
        self.diff(left, right, 'chars')
    
    def equal_words(self, left, right):
        text = ''.join(left)
        for line in text.splitlines(True):
            self.left += line
            self.right += line
            if line.endswith('\n'):
                self.append_line()
    equal_chars = equal_words
    
    def delete_words(self, left, right):
        assert not right
        on, off = '\0-', '\1'
        self.left += on + ''.join(left) + off
    delete_chars = delete_words
    
    def insert_words(self, left, right):
        assert not left
        on, off = '\0+', '\1'
        self.right += on + ''.join(right) + off
    insert_chars = insert_words
    
    def mangle_chars(self, words):
        return list(''.join(words))
    
    def replace_chars(self, left, right):
        on, off = '\0^', '\1'
        self.left += on + ''.join(left) + off
        self.right += on + ''.join(right) + off

def simple_colorize(s, chosen_color):
    return "%s%s%s" % (color_codes[chosen_color], s, color_codes["none"])

def start():
    # If you change any of these, also update README.
    parser = optparse.OptionParser(usage="usage: %prog [options] left_file right_file",
                                   description="Show differences between files in a two column view.")
    parser.add_option("--cols", default=None,
                      help="specify the width of the screen. Autodetection is Linux only")
    parser.add_option("--head", default=0, type="int",
                      help="consider only the first N lines of each file")
    parser.add_option("--highlight", default=False, action="store_true",
                      help="color by changing the background color instead of the foreground color.  Very fast, ugly, displays all changes")
    parser.add_option("--line-numbers", default=False, action="store_true",
                      help="generate output with line numbers")
    parser.add_option("--no-bold", default=False, action="store_true",
                      help="use non-bold colors; recommended for with solarized")
    parser.add_option("--no-headers", default=False, action="store_true",
                      help="don't label the left and right sides with their file names")
    parser.add_option("--numlines", default=5, type="int",
                      help="how many lines of context to print; can't be combined with --whole-file")
    parser.add_option("--recursive", default=False, action="store_true",
                      help="recursively compare subdirectories")
    parser.add_option("--show-all-spaces", default=False, action="store_true",
                      help="color all non-matching whitespace including that which is not needed for drawing the eye to changes.  Slow, ugly, displays all changes")
    parser.add_option("--version", default=False, action="store_true",
                      help="print version and exit")
    parser.add_option("--whole-file", default=False, action="store_true",
                      help="show the whole file instead of just changed lines and context")

    (options, args) = parser.parse_args()

    if options.version:
        print("icdiff version 1.2.2")
        sys.exit()

    if len(args) != 2:
        parser.print_help()
        sys.exit()

    a, b = args

    if not options.cols:
        def ioctl_GWINSZ(fd):
            try:
                import fcntl, termios, struct
                cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
            except Exception:
                return None
            return cr
        cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
        if cr:
            options.cols = cr[1]
        else:
            options.cols = 80

    if options.recursive:
        diff_recursively(options, a, b)
    else:
        diff_files(options, a, b)

def diff_recursively(options, a, b):
    def print_meta(s):
        print(simple_colorize(s, "magenta"))

    if os.path.isfile(a) and os.path.isfile(b):
        if not filecmp.cmp(a, b):
            diff_files(options, a, b)

    elif os.path.isdir(a) and os.path.isdir(b):
        a_contents = set(os.listdir(a))
        b_contents = set(os.listdir(b))

        for child in sorted(a_contents.union(b_contents)):
            if child not in b_contents:
                print_meta("Only in %s: %s" % (a, child))
            elif child not in a_contents:
                print_meta("Only in %s: %s" % (b, child))
            else:
                diff_recursively(options,
                                 os.path.join(a, child),
                                 os.path.join(b, child))

    elif os.path.isdir(a) and os.path.isfile(b):
        print_meta("File %s is a directory while %s is a file" % (a, b))

    elif os.path.isfile(a) and os.path.isdir(b):
        print_meta("File %s is a file while %s is a directory" % (a, b))

def diff_files(options, a, b):
    headers = a, b
    if options.no_headers:
        headers = None, None

    head = int(options.head)

    for x in [a, b]:
        if os.path.isdir(x):
            sys.stderr.write("error: %s is a directory; did you mean to pass --recursive?\n" % x)
            sys.exit(1)
    lines_a = open(a, "U").readlines()
    lines_b = open(b, "U").readlines()

    if head != 0:
        lines_a = lines_a[:head]
        lines_b = lines_b[:head]
    
    lines_a = [decode(line) for line in lines_a]
    lines_b = [decode(line) for line in lines_b]

    cd = ConsoleDiff(
        cols = int(options.cols),
        show_all_spaces = options.show_all_spaces,
        highlight = options.highlight,
        no_bold = options.no_bold,
        line_numbers = options.line_numbers,
        context = (not options.whole_file),
        numlines = int(options.numlines),
    )
    for line in cd.make_table(lines_a, lines_b, headers[0], headers[1]):
        print(line.encode("utf-8"))
        sys.stdout.flush()

def decode(line):
    r'''Decode the given string to Unicode.
        Assumes UTF-8, falling back to Windows-1252 if necessary.
    '''#"""#'''
    try:
        result = line.decode("utf-8")
    except UnicodeDecodeError:
        try:
            result = line.decode("cp1252")
        except UnicodeDecodeError:
            result = line.decode("cp437")
    
    # Dumb down smart quotes and such.
    #result = result.replace(u"\u2013", '-')
    #result = result.replace(u"\u2014", ' -- ')
    #result = result.replace(u"  --  ", ' -- ')
    #result = result.replace(u'\u2018', "'")
    #result = result.replace(u'\u2019', "'")
    #result = result.replace(u"\u201c", '"')
    #result = result.replace(u"\u201d", '"')
    #result = result.replace(u"\u2122", '(TM)')
    #result = result.replace(u"\u00ae", '(R)')
    return result

if __name__ == "__main__":
    try:
        start()
    except KeyboardInterrupt:
        pass
    except IOError as e:
        if e.errno == errno.EPIPE:
            pass
        else:
            raise
